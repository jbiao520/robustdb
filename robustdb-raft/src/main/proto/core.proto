syntax = "proto3";

option java_package = "com.robustdb.raft.gRequest.api";
option java_outer_classname = "RaftRequestDataServiceApi";
option java_multiple_files = true;

package com.robustdb.raft.gRequest.api;
// common

service RaftRequestDataService {
    rpc requestVote (RequestVoteRequest) returns (RequestVoteResult);
    rpc appendEntries (AppendEntriesRequest) returns (AppendEntriesResult);
    rpc installSnapshot (InstallSnapshotRequest) returns (InstallSnapshotResult);
    rpc addServer (AddServerRequest) returns (AddServerResult);
    rpc removeServer (RemoveServerRequest) returns (RemoveServerResult);
}

message NodeEndpoint {
    string id = 1;
    string host = 2;
    int32 port = 3;
}

// Request

message RequestVoteRequest {
    int32 term = 1;
    string candidate_id = 2;
    int32 last_log_index = 3;
    int32 last_log_term = 4;
}

message RequestVoteResult {
    int32 term = 1;
    bool vote_granted = 2;
}

message AppendEntriesRequest {
    string message_id = 1;
    int32 term = 2;
    string leader_id = 3;
    int32 prev_log_index = 4;
    int32 prev_log_term = 5;
    int32 leader_commit = 6;

    message Entry {
        int32 kind = 1;
        int32 index = 2;
        int32 term = 3;
        bytes command = 4;
    }

    repeated Entry entries = 7;
}

message AppendEntriesResult {
    string Request_message_id = 1;
    int32 term = 2;
    bool success = 3;
}

message InstallSnapshotRequest {
    int32 term = 1;
    string leader_id = 2;
    int32 last_index = 3;
    int32 last_term = 4;
    repeated NodeEndpoint last_config = 5;
    int32 offset = 6;
    bytes data = 7;
    bool done = 8;
}

message InstallSnapshotResult {
    int32 term = 1;
}

message AddServerRequest {
    NodeEndpoint new_server = 1;
}

message AddServerResult {
    string status = 1;
    NodeEndpoint leader_hint = 2;
}

message RemoveServerRequest {
    NodeEndpoint old_server = 1;
}

message RemoveServerResult {
    string status = 1;
    NodeEndpoint leader_hint = 2;
}

// log

message AddNodeCommand {
    repeated NodeEndpoint node_endpoints = 1;
    NodeEndpoint new_node_endpoint = 2;
}

message RemoveNodeCommand {
    repeated NodeEndpoint node_endpoints = 1;
    string node_to_remove = 2;
}

message SnapshotHeader {
    int32 last_index = 1;
    int32 last_term = 2;
    repeated NodeEndpoint last_config = 3;
}